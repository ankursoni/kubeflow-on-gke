name: Trained files to gcs
description: Function to upload training output to gcs bucket.
inputs:
- {name: gcs_bucket_name, type: String}
- {name: model}
outputs:
- {name: Output, type: Boolean}
implementation:
  container:
    image: eu.gcr.io/kubeflow-bg-experiment/recommender:latest
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def trained_files_to_gcs(
          # test_result: bool,
          gcs_bucket_name,
          model_path,
      ):
          """Function to upload training output to gcs bucket."""
          from google.cloud import storage

          # if not test_result:
          #     return

          client = storage.Client()
          bucket = client.bucket(gcs_bucket_name)

          with open(file=f"{model_path}", mode="rb") as file:
              blob = bucket.blob("listwise_ranking_model_weights.h5")
              blob.upload_from_file(file, content_type="bytes")

          return True

      def _serialize_bool(bool_value: bool) -> str:
          if isinstance(bool_value, str):
              return bool_value
          if not isinstance(bool_value, bool):
              raise TypeError('Value "{}" has type "{}" instead of bool.'.format(
                  str(bool_value), str(type(bool_value))))
          return str(bool_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='Trained files to gcs', description='Function to upload training output to gcs bucket.')
      _parser.add_argument("--gcs-bucket-name", dest="gcs_bucket_name", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = trained_files_to_gcs(**_parsed_args)

      _outputs = [_outputs]

      _output_serializers = [
          _serialize_bool,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --gcs-bucket-name
    - {inputValue: gcs_bucket_name}
    - --model
    - {inputPath: model}
    - '----output-paths'
    - {outputPath: Output}
